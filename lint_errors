üîç Running linters...
golangci-lint run ./...
internal/cache/cache.go:204:15: Error return value of `f.Close` is not checked (errcheck)
	defer f.Close()
	             ^
internal/cache/cache.go:208:12: Error return value of `os.Remove` is not checked (errcheck)
		os.Remove(tempFile)
		         ^
internal/cache/cache.go:213:12: Error return value of `os.Remove` is not checked (errcheck)
		os.Remove(tempFile)
		         ^
internal/cache/cache.go:219:12: Error return value of `os.Remove` is not checked (errcheck)
		os.Remove(tempFile)
		         ^
internal/cache/cache.go:240:15: Error return value of `f.Close` is not checked (errcheck)
	defer f.Close()
	             ^
internal/cache/cache.go:294:8: Error return value of `c.save` is not checked (errcheck)
	c.save()
	      ^
internal/cache/cache.go:40:13: G301: Expect directory permissions to be 0750 or less (gosec)
		if err := os.MkdirAll(dir, 0755); err != nil {
		          ^
internal/cache/cache.go:1:1: package-comments: should have a package comment (revive)
package cache
^
internal/cache/cache.go:14:12: fieldalignment: struct with 56 pointer bytes could be 48 (govet)
type Entry struct {
           ^
internal/cache/cache.go:22:12: fieldalignment: struct with 104 pointer bytes could be 24 (govet)
type Cache struct {
           ^
internal/metrics/metrics.go:289:13: Error return value of `gauge.Write` is not checked (errcheck)
	gauge.Write(metric)
	           ^
internal/metrics/metrics.go:3:1: package-comments: should have a package comment (revive)
package metrics
^
internal/metrics/metrics.go:153:20: type assertion on error will fail on wrapped errors. Use errors.As to check for specific errors (errorlint)
		if areErr, ok := err.(prometheus.AlreadyRegisteredError); ok {
		                 ^
internal/metrics/metrics.go:20:16: fieldalignment: struct with 192 pointer bytes could be 168 (govet)
type Collector struct {
               ^
internal/logger/logger.go:38:13: G301: Expect directory permissions to be 0750 or less (gosec)
		if err := os.MkdirAll(logDir, 0755); err != nil {
		          ^
internal/logger/logger.go:43:16: G302: Expect file permissions to be 0600 or less (gosec)
		file, err := os.OpenFile(logFile, os.O_CREATE|os.O_APPEND|os.O_WRONLY, 0644)
		             ^
internal/logger/logger.go:1:1: package-comments: should have a package comment (revive)
package logger
^
internal/health/health.go:184:13: Error return value is not checked (errcheck)
	hitRate := stats["hit_rate"].(float64)
	           ^
internal/health/health.go:186:22: Error return value is not checked (errcheck)
	if hitRate < 0.5 && stats["total_accesses"].(uint64) > 100 {
	                    ^
internal/health/health.go:392:12: Error return value of `file.Close` is not checked (errcheck)
	file.Close()
	          ^
internal/health/health.go:393:11: Error return value of `os.Remove` is not checked (errcheck)
	os.Remove(testFile)
	         ^
internal/scanner/scanner.go:298:17: Error return value of `s.watcher.Close` is not checked (errcheck)
	s.watcher.Close()
	               ^
internal/server/server.go:155:13: Error return value of `fmt.Fprintf` is not checked (errcheck)
	fmt.Fprintf(w, `<!DOCTYPE html>
	           ^
main.go:54:16: Error return value of `log.Sync` is not checked (errcheck)
	defer log.Sync()
	              ^
main.go:86:24: Error return value of `configWatcher.Watch` is not checked (errcheck)
	go configWatcher.Watch(ctx, func(newCfg *config.Config) {
	                      ^
test/config_test.go:188:13: Error return value of `os.MkdirAll` is not checked (errcheck)
	os.MkdirAll(allowedDir, 0755)
	           ^
test/metrics_test.go:130:24: Error return value of `resp.Body.Close` is not checked (errcheck)
		defer resp.Body.Close()
		                     ^
test/metrics_test.go:435:23: Error return value of `resp.Body.Close` is not checked (errcheck)
	defer resp.Body.Close()
	                     ^
test/metrics_test.go:532:23: Error return value of `resp.Body.Close` is not checked (errcheck)
	defer resp.Body.Close()
	                     ^
test/scanner_test.go:22:13: Error return value of `os.MkdirAll` is not checked (errcheck)
	os.MkdirAll(certDir, 0755)
	           ^
test/scanner_test.go:184:13: Error return value of `os.MkdirAll` is not checked (errcheck)
	os.MkdirAll(certDir, 0755)
	           ^
test/scanner_test.go:326:15: Error return value of `os.MkdirAll` is not checked (errcheck)
			os.MkdirAll(certDir, 0755)
			           ^
test/server_test.go:69:25: Error return value of `resp.Body.Close` is not checked (errcheck)
			defer resp.Body.Close()
			                     ^
test/server_test.go:123:23: Error return value of `resp.Body.Close` is not checked (errcheck)
	defer resp.Body.Close()
	                     ^
test/server_test.go:221:23: Error return value of `resp.Body.Close` is not checked (errcheck)
	defer resp.Body.Close()
	                     ^
test/server_test.go:302:17: Error return value of `resp.Body.Close` is not checked (errcheck)
	resp.Body.Close()
	               ^
test/utils_test.go:24:11: Error return value of `rand.Read` is not checked (errcheck)
	rand.Read(b)
	         ^
internal/health/health.go:74:1: cyclomatic complexity 18 of func `(*Checker).Check` is high (> 15) (gocyclo)
func (c *Checker) Check() *Response {
^
test/metrics_test.go:25:1: cyclomatic complexity 53 of func `TestAllMetricsExposedFixed` is high (> 15) (gocyclo)
func TestAllMetricsExposedFixed(t *testing.T) {
^
test/scanner_test.go:304:1: cyclomatic complexity 24 of func `TestIssuerClassification` is high (> 15) (gocyclo)
func TestIssuerClassification(t *testing.T) {
^
test/utils_test.go:206:1: cyclomatic complexity 20 of func `parsePrometheusMetrics` is high (> 15) (gocyclo)
func parsePrometheusMetrics(content string) []MetricValue {
^
internal/server/server.go:90:5: G402: TLS Bad Cipher Suite: TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA (gosec)
				tls.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,
				^
internal/health/health.go:1:1: package-comments: should have a package comment (revive)
package health
^
internal/health/health.go:21:2: exported: exported const StatusHealthy should have comment (or a comment on this block) or be unexported (revive)
	StatusHealthy   Status = "healthy"
	^
internal/scanner/scanner.go:3:1: package-comments: should have a package comment (revive)
package scanner
^
internal/server/server.go:1:1: package-comments: should have a package comment (revive)
package server
^
main.go:1:1: package-comments: should have a package comment (revive)
package main
^
test/utils_test.go:406:6: func `verifyMetricWithLabels` is unused (unused)
func verifyMetricWithLabels(t *testing.T, metrics []MetricValue, metricName string, expectedLabels map[string]string) {
     ^
test/utils_test.go:550:6: func `createCertificateWithCustomSubject` is unused (unused)
func createCertificateWithCustomSubject(t *testing.T, subjectStr string) []byte {
     ^
internal/scanner/scanner.go:371:2: missing cases in switch of type x509.SignatureAlgorithm: x509.UnknownSignatureAlgorithm, x509.MD2WithRSA, x509.SHA256WithRSA, x509.SHA384WithRSA, x509.SHA512WithRSA, x509.DSAWithSHA256, x509.ECDSAWithSHA256, x509.ECDSAWithSHA384, x509.ECDSAWithSHA512, x509.SHA256WithRSAPSS, x509.SHA384WithRSAPSS, x509.SHA512WithRSAPSS, x509.PureEd25519 (exhaustive)
	switch cert.SignatureAlgorithm {
	^
internal/server/server.go:236:2: missing cases in switch of type health.Status: health.StatusHealthy (exhaustive)
	switch response.Status {
	^
internal/health/health.go:184:2: type assertion must be checked (forcetypeassert)
	hitRate := stats["hit_rate"].(float64)
	^
internal/health/health.go:186:22: type assertion must be checked (forcetypeassert)
	if hitRate < 0.5 && stats["total_accesses"].(uint64) > 100 {
	                    ^
internal/health/health.go:189:2: appendCombine: can combine chain of 2 appends into one (gocritic)
	checks = append(checks, Check{
	^
internal/health/health.go:233:2: appendCombine: can combine chain of 2 appends into one (gocritic)
	checks = append(checks, Check{
	^
internal/health/health.go:257:2: appendCombine: can combine chain of 2 appends into one (gocritic)
	checks = append(checks, Check{
	^
internal/health/health.go:285:2: appendCombine: can combine chain of 2 appends into one (gocritic)
	checks = append(checks, Check{
	^
internal/health/health.go:307:2: appendCombine: can combine chain of 3 appends into one (gocritic)
	checks = append(checks, Check{
	^
main.go:59:3: exitAfterDefer: os.Exit will exit, and `defer log.Sync()` will not run (gocritic)
		os.Exit(0)
		^
test/metrics_test.go:130:3: deferInLoop: Possible resource leak, 'defer' is called in the 'for' loop (gocritic)
		defer resp.Body.Close()
		^
test/utils_test.go:227:17: offBy1: Index() can return -1; maybe you wanted to do line[:openBrace+1] (gocritic)
			metricName = line[:openBrace]
			             ^
internal/scanner/scanner.go:19:1: File is not properly formatted (goimports)

^
internal/server/server.go:11:1: File is not properly formatted (goimports)
	"github.com/brandonhon/tls-cert-monitor/internal/config"
^
main.go:11:1: File is not properly formatted (goimports)

^
test/config_test.go:9:1: File is not properly formatted (goimports)
	"github.com/brandonhon/tls-cert-monitor/internal/config"
^
test/metrics_test.go:15:1: File is not properly formatted (goimports)

^
test/scanner_test.go:11:1: File is not properly formatted (goimports)

^
test/server_test.go:11:1: File is not properly formatted (goimports)

^
internal/config/config.go:18:13: fieldalignment: struct with 152 pointer bytes could be 104 (govet)
type Config struct {
            ^
internal/health/health.go:27:12: fieldalignment: struct with 88 pointer bytes could be 80 (govet)
type Check struct {
           ^
internal/health/health.go:36:15: fieldalignment: struct with 72 pointer bytes could be 56 (govet)
type Response struct {
              ^
internal/scanner/scanner.go:28:14: fieldalignment: struct with 72 pointer bytes could be 48 (govet)
type Scanner struct {
             ^
internal/scanner/scanner.go:40:22: fieldalignment: struct with 160 pointer bytes could be 136 (govet)
type CertificateInfo struct {
                     ^
test/config_test.go:70:13: fieldalignment: struct with 40 pointer bytes could be 32 (govet)
	tests := []struct {
	           ^
test/utils_test.go:198:18: fieldalignment: struct with 24 pointer bytes could be 16 (govet)
type MetricValue struct {
                 ^
test/config_test.go:44:5: shadow: declaration of "err" shadows declaration at line 39 (govet)
	if err := os.WriteFile(configFile, data, 0644); err != nil {
	   ^
test/metrics_test.go:412:5: shadow: declaration of "err" shadows declaration at line 405 (govet)
	if err := certScanner.Scan(ctx); err != nil {
	   ^
test/metrics_test.go:422:6: shadow: declaration of "err" shadows declaration at line 405 (govet)
		if err := srv.Start(); err != nil && err != http.ErrServerClosed {
		   ^
test/metrics_test.go:509:5: shadow: declaration of "err" shadows declaration at line 502 (govet)
	if err := certScanner.Scan(ctx); err != nil {
	   ^
test/metrics_test.go:519:6: shadow: declaration of "err" shadows declaration at line 502 (govet)
		if err := srv.Start(); err != nil && err != http.ErrServerClosed {
		   ^
test/scanner_test.go:354:7: shadow: declaration of "err" shadows declaration at line 347 (govet)
			if err := s.Scan(ctx); err != nil {
			   ^
test/metrics_test.go:124:24: net/http.Get must not be called (noctx)
		resp, err := http.Get(fmt.Sprintf("http://127.0.0.1:%d/metrics", port))
		                     ^
test/metrics_test.go:431:23: net/http.Get must not be called (noctx)
	resp, err := http.Get(fmt.Sprintf("http://127.0.0.1:%d/metrics", port))
	                     ^
test/metrics_test.go:528:23: net/http.Get must not be called (noctx)
	resp, err := http.Get(fmt.Sprintf("http://127.0.0.1:%d/metrics", port))
	                     ^
test/server_test.go:65:25: net/http.Get must not be called (noctx)
			resp, err := http.Get(baseURL + tt.endpoint)
			                     ^
test/server_test.go:119:23: net/http.Get must not be called (noctx)
	resp, err := http.Get(fmt.Sprintf("http://127.0.0.1:%d/healthz", port))
	                     ^
test/server_test.go:217:23: net/http.Get must not be called (noctx)
	resp, err := http.Get(fmt.Sprintf("http://127.0.0.1:%d/metrics", port))
	                     ^
test/server_test.go:298:23: net/http.Get must not be called (noctx)
	resp, err := http.Get(fmt.Sprintf("http://127.0.0.1:%d/", port))
	                     ^
test/utils_test.go:207:2: Consider pre-allocating `metrics` (prealloc)
	var metrics []MetricValue
	^
