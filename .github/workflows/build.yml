name: Build and Release

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a release (true/false)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

env:
  PROJECT_NAME: tls-cert-monitor

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run code quality checks
      run: |
        # Format check
        black --check .
        isort --check-only .
        
        # Linting
        flake8 . --ignore=E501,W503 --exclude=.venv,build,dist,*.egg-info,.git,__pycache__,.pytest_cache,.mypy_cache
        
        # Type checking
        mypy tls_cert_monitor/
        
        # Security checks
        bandit -r tls_cert_monitor/ --skip B104
    
    - name: Generate test certificates
      run: ./scripts/generate-test-certs.sh
    
    - name: Run tests
      run: |
        pytest tests/ --cov=tls_cert_monitor --cov-report=xml --cov-report=term
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build-linux-amd64:
    name: Build Linux Binary (AMD64)
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Linux binary
      run: |
        echo "Building Linux binary in container..."
        mkdir -p dist
        
        # Build and run container with proper user permissions
        docker build -f build/Dockerfile.linux \
          --build-arg USER_ID=$(id -u) \
          --build-arg GROUP_ID=$(id -g) \
          -t ${{ env.PROJECT_NAME }}-builder-linux .
        docker run --rm -v $(pwd)/dist:/app/dist ${{ env.PROJECT_NAME }}-builder-linux
        
        # Verify binary was created and ensure it's executable
        ls -la dist/
        
        # Ensure binary is executable (fallback in case container chmod failed)
        if [ -f "dist/tls-cert-monitor" ]; then
          chmod +x dist/tls-cert-monitor || sudo chmod +x dist/tls-cert-monitor || echo "Warning: Could not make binary executable"
        fi
        
        file dist/tls-cert-monitor
        ls -lh dist/tls-cert-monitor
    
    - name: Upload Linux binary
      uses: actions/upload-artifact@v4
      with:
        name: linux-amd64-binary
        path: dist/tls-cert-monitor
        retention-days: 30

  build-windows-amd64:
    name: Build Windows Binary (AMD64)
    runs-on: windows-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Build Windows binary
      run: |
        Write-Host "Building Windows binary with Nuitka..."
        New-Item -ItemType Directory -Path dist -Force
        
        $FLAGS = @(
          "--onefile",
          "--standalone", 
          "--enable-plugin=pkg-resources",
          "--assume-yes-for-downloads",
          "--disable-console",
          "--follow-imports",
          "--include-package=tls_cert_monitor",
          "--include-module=uvicorn",
          "--include-module=cryptography",
          "--include-module=prometheus_client",
          "--output-dir=dist",
          "--output-filename=tls-cert-monitor.exe",
          "main.py"
        )
        
        python -m nuitka @FLAGS
        
        # Verify binary
        Get-ChildItem dist/
        Get-ItemProperty dist/tls-cert-monitor.exe | Select-Object Name, Length
      shell: pwsh
    
    - name: Upload Windows binary
      uses: actions/upload-artifact@v4
      with:
        name: windows-amd64-binary
        path: dist/tls-cert-monitor.exe
        retention-days: 30

  build-macos-amd64:
    name: Build macOS Binary (AMD64)
    runs-on: macos-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Build macOS binary
      run: |
        echo "Building macOS binary with Nuitka..."
        mkdir -p dist
        
        NUITKA_FLAGS="--onefile --standalone --enable-plugin=pkg-resources --assume-yes-for-downloads"
        NUITKA_FLAGS="$NUITKA_FLAGS --disable-console --follow-imports"
        NUITKA_FLAGS="$NUITKA_FLAGS --include-package=tls_cert_monitor"
        NUITKA_FLAGS="$NUITKA_FLAGS --include-module=uvicorn"
        NUITKA_FLAGS="$NUITKA_FLAGS --include-module=cryptography"
        NUITKA_FLAGS="$NUITKA_FLAGS --include-module=prometheus_client"
        
        python -m nuitka $NUITKA_FLAGS main.py --output-dir=dist --output-filename=tls-cert-monitor
        
        # Verify and make executable
        ls -la dist/
        chmod +x dist/tls-cert-monitor
        file dist/tls-cert-monitor
        ls -lh dist/tls-cert-monitor
    
    - name: Upload macOS binary
      uses: actions/upload-artifact@v4
      with:
        name: macos-amd64-binary
        path: dist/tls-cert-monitor
        retention-days: 30

  build-linux-arm64:
    name: Build Linux Binary (ARM64)
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Linux ARM64 binary
      run: |
        echo "Building Linux ARM64 binary using Docker buildx cross-compilation..."
        mkdir -p dist
        
        # Use buildx with output to extract the /app/dist directory from the container
        docker buildx build -f build/Dockerfile.linux \
          --platform linux/arm64 \
          --build-arg USER_ID=$(id -u) \
          --build-arg GROUP_ID=$(id -g) \
          --output type=local,dest=./output \
          .
        
        # Extract the binary from the container's /app/dist directory
        echo "Checking output structure..."
        find output/ -name "tls-cert-monitor" -type f | head -5
        
        if [ -f "output/app/dist/tls-cert-monitor" ]; then
          cp output/app/dist/tls-cert-monitor dist/tls-cert-monitor
          chmod +x dist/tls-cert-monitor
          echo "ARM64 binary extracted successfully"
        else
          echo "Error: ARM64 binary not found in expected location"
          echo "Contents of output/:"
          find output/ -type f | head -20
          exit 1
        fi
        
        # Verify binary
        ls -la dist/
        file dist/tls-cert-monitor
        ls -lh dist/tls-cert-monitor
    
    - name: Upload Linux ARM64 binary
      uses: actions/upload-artifact@v4
      with:
        name: linux-arm64-binary
        path: dist/tls-cert-monitor
        retention-days: 30

  build-windows-arm64:
    name: Build Windows Binary (ARM64)
    runs-on: windows-latest
    needs: test
    if: false  # Disabled: Nuitka doesn't support ARM64 cross-compilation on x64 Windows runners
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Skip Windows ARM64 build
      run: |
        Write-Host "Windows ARM64 builds are not supported yet."
        Write-Host "Nuitka does not support --target-arch=arm64 cross-compilation on x64 runners."
        Write-Host "This would require native ARM64 Windows runners which are not available in GitHub Actions."
        exit 0
      shell: pwsh

  build-macos-arm64:
    name: Build macOS Binary (ARM64)
    runs-on: macos-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Build macOS ARM64 binary
      run: |
        echo "Building macOS ARM64 binary with Nuitka..."
        echo "Current architecture: $(uname -m)"
        mkdir -p dist
        
        NUITKA_FLAGS="--onefile --standalone --enable-plugin=pkg-resources --assume-yes-for-downloads"
        NUITKA_FLAGS="$NUITKA_FLAGS --disable-console --follow-imports"
        NUITKA_FLAGS="$NUITKA_FLAGS --include-package=tls_cert_monitor"
        NUITKA_FLAGS="$NUITKA_FLAGS --include-module=uvicorn"
        NUITKA_FLAGS="$NUITKA_FLAGS --include-module=cryptography"
        NUITKA_FLAGS="$NUITKA_FLAGS --include-module=prometheus_client"
        
        # Only add --target-arch if we're not already on ARM64
        if [ "$(uname -m)" != "arm64" ]; then
          NUITKA_FLAGS="$NUITKA_FLAGS --target-arch=arm64"
        fi
        
        python -m nuitka $NUITKA_FLAGS main.py --output-dir=dist --output-filename=tls-cert-monitor
        
        # Verify and make executable
        ls -la dist/
        chmod +x dist/tls-cert-monitor
        file dist/tls-cert-monitor
        ls -lh dist/tls-cert-monitor
    
    - name: Upload macOS ARM64 binary
      uses: actions/upload-artifact@v4
      with:
        name: macos-arm64-binary
        path: dist/tls-cert-monitor
        retention-days: 30

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-linux-amd64, build-linux-arm64, build-windows-amd64, build-macos-amd64, build-macos-arm64]
    permissions:
      contents: write
    if: |
      startsWith(github.ref, 'refs/tags/v') || 
      (github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true') ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Identify release trigger
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          echo "🏷️ Release triggered by git tag: ${GITHUB_REF#refs/tags/}"
        elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "🚀 Release triggered manually via workflow dispatch"
        else
          echo "📝 Release triggered by commit message: ${{ github.event.head_commit.message }}"
        fi
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist/
    
    - name: Prepare release assets
      run: |
        # List all downloaded artifacts
        ls -la dist/
        
        # Navigate to dist directory and organize binaries
        cd dist/
        
        # Create platform-specific tar.gz archives with new naming: platform-arch.tar.gz
        
        # Linux AMD64
        if [ -f "linux-amd64-binary/tls-cert-monitor" ]; then
          cp linux-amd64-binary/tls-cert-monitor ./tls-cert-monitor
          tar -czf linux-amd64.tar.gz tls-cert-monitor
          rm tls-cert-monitor
        fi
        
        # Linux ARM64
        if [ -f "linux-arm64-binary/tls-cert-monitor" ]; then
          cp linux-arm64-binary/tls-cert-monitor ./tls-cert-monitor
          tar -czf linux-arm64.tar.gz tls-cert-monitor
          rm tls-cert-monitor
        fi
        
        # Windows AMD64
        if [ -f "windows-amd64-binary/tls-cert-monitor.exe" ]; then
          cp windows-amd64-binary/tls-cert-monitor.exe ./tls-cert-monitor.exe
          tar -czf windows-amd64.tar.gz tls-cert-monitor.exe
          rm tls-cert-monitor.exe
        fi
        
        # Windows ARM64 - Disabled (not supported by GitHub Actions)
        # Nuitka doesn't support ARM64 cross-compilation on x64 Windows runners
        
        # macOS AMD64 (Intel)
        if [ -f "macos-amd64-binary/tls-cert-monitor" ]; then
          cp macos-amd64-binary/tls-cert-monitor ./tls-cert-monitor
          tar -czf darwin-amd64.tar.gz tls-cert-monitor
          rm tls-cert-monitor
        fi
        
        # macOS ARM64 (Apple Silicon)
        if [ -f "macos-arm64-binary/tls-cert-monitor" ]; then
          cp macos-arm64-binary/tls-cert-monitor ./tls-cert-monitor
          tar -czf darwin-arm64.tar.gz tls-cert-monitor
          rm tls-cert-monitor
        fi
        
        # Clean up artifact directories
        rm -rf */
        
        # List final archives
        ls -la
        
        # Create checksums for archives
        sha256sum *.tar.gz > checksums.txt
        cat checksums.txt
    
    - name: Extract release notes
      id: release_notes
      run: |
        # Extract version from tag or generate from commit
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          # Generate version from commit for manual releases
          VERSION="v$(date +%Y.%m.%d)-${GITHUB_SHA:0:7}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Create release notes
        cat > release_notes.md << EOF
        # TLS Certificate Monitor $VERSION
        
        ## Cross-Platform Binaries
        
        This release includes pre-compiled binaries for multiple architectures:
        
        ### Linux
        - **AMD64 (x86_64)**: \`linux-amd64.tar.gz\`
        - **ARM64**: \`linux-arm64.tar.gz\`
        
        ### Windows  
        - **AMD64 (x86_64)**: \`windows-amd64.tar.gz\`
        - **ARM64**: *Not yet supported (requires native ARM64 Windows runners)*
        
        ### macOS
        - **AMD64 (Intel)**: \`darwin-amd64.tar.gz\`
        - **ARM64 (Apple Silicon)**: \`darwin-arm64.tar.gz\`
        
        ## Installation
        
        1. Download the appropriate archive for your platform and architecture
        2. Extract: \`tar -xzf <platform>-<arch>.tar.gz\`
        3. Make executable (Linux/macOS): \`chmod +x tls-cert-monitor\`
        4. Run with: \`./tls-cert-monitor --help\`
        
        ## Verification
        
        All archives include SHA256 checksums in \`checksums.txt\` for verification.
        
        ## What's Changed
        
        See the commit history for detailed changes in this release.
        EOF
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.release_notes.outputs.version }}
        name: Release ${{ steps.release_notes.outputs.version }}
        body_path: release_notes.md
        files: |
          dist/linux-amd64.tar.gz
          dist/linux-arm64.tar.gz
          dist/windows-amd64.tar.gz
          dist/darwin-amd64.tar.gz
          dist/darwin-arm64.tar.gz
          dist/checksums.txt
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/amd64,linux/arm64
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository_owner }}/${{ env.PROJECT_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha
        labels: |
          org.opencontainers.image.title=TLS Certificate Monitor
          org.opencontainers.image.description=Monitor TLS certificates and track expiration dates
          org.opencontainers.image.vendor=${{ github.repository_owner }}
          org.opencontainers.image.licenses=MIT
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        provenance: false
        sbom: false
        outputs: type=registry