name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'  # Only run on semantic version tags (v1.0.0, v1.2.3, etc.)

env:
  PROJECT_NAME: tls-cert-monitor

jobs:
  test:
    name: Test and Quality Checks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run quality checks
      run: make check-system

    - name: Run tests
      run: make test-system

    - name: Test dry-run execution
      run: |
        python main.py --help
        python main.py --version

  build-linux-amd64:
    name: Build Linux Binary (AMD64)
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for changelog generation

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Linux binary
      run: |
        echo "üêß Building Linux binary in container..."
        mkdir -p dist
        
        # Build and run container with proper user permissions
        docker build -f build/Dockerfile.linux \
          --build-arg USER_ID=$(id -u) \
          --build-arg GROUP_ID=$(id -g) \
          -t ${{ env.PROJECT_NAME }}-builder-linux .
        docker run --rm -v $(pwd)/dist:/app/dist ${{ env.PROJECT_NAME }}-builder-linux
        
        # Verify binary was created and ensure it's executable
        ls -la dist/
        
        # Ensure binary is executable (fallback in case container chmod failed)
        if [ -f "dist/tls-cert-monitor" ]; then
          chmod +x dist/tls-cert-monitor || sudo chmod +x dist/tls-cert-monitor || echo "Warning: Could not make binary executable"
        fi
        
        file dist/tls-cert-monitor
        ls -lh dist/tls-cert-monitor

    - name: Install cosign
      uses: sigstore/cosign-installer@v3

    - name: Sign Linux binary with cosign
      env:
        COSIGN_EXPERIMENTAL: 1
      run: |
        echo "üîè Signing Linux binary with cosign..."
        cosign sign-blob --yes dist/tls-cert-monitor --output-signature dist/tls-cert-monitor.sig --output-certificate dist/tls-cert-monitor.crt
        echo "‚úÖ Linux binary signed successfully"
        ls -la dist/

    - name: Upload Linux binary
      uses: actions/upload-artifact@v4
      with:
        name: linux-amd64-binary
        path: |
          dist/tls-cert-monitor
          dist/tls-cert-monitor.sig
          dist/tls-cert-monitor.crt
        retention-days: 30

  build-windows-amd64:
    name: Build Windows Binary (AMD64)
    runs-on: windows-latest
    needs: test
    permissions:
      contents: read
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Restore Nuitka cache
      uses: actions/cache/restore@v4
      with:
        path: |
          ~/.cache/Nuitka
          ~/AppData/Local/Nuitka
          %LOCALAPPDATA%\Nuitka
        key: nuitka-${{ runner.os }}-${{ hashFiles('main.py', 'tls_cert_monitor/**/*.py', 'requirements*.txt') }}
        restore-keys: |
          nuitka-${{ runner.os }}-

    - name: Build Windows binary
      run: |
        Write-Host "ü™ü Building Windows binary with Nuitka..."
        New-Item -ItemType Directory -Path dist -Force

        # Add Windows Defender exclusion for build directory
        Write-Host "Adding Windows Defender exclusion for build directory..."
        try {
          Add-MpPreference -ExclusionPath "$PWD\dist" -ErrorAction SilentlyContinue
          Write-Host "‚úÖ Added Windows Defender exclusion"
        } catch {
          Write-Host "‚ö†Ô∏è Could not add Windows Defender exclusion (may require admin): $($_.Exception.Message)"
        }

        # Base Nuitka flags for antivirus compatibility
        $FLAGS = @(
          "--onefile",
          "--standalone",
          "--enable-plugin=pkg-resources",
          "--assume-yes-for-downloads",
          "--follow-imports",
          "--include-package=tls_cert_monitor",
          "--include-module=uvicorn",
          "--include-module=cryptography",
          "--include-module=prometheus_client",
          "--output-dir=dist",
          "--output-filename=${{ env.PROJECT_NAME }}.exe",
          "--windows-company-name=TLS Cert Monitor",
          "--windows-product-name=${{ env.PROJECT_NAME }}",
          "--windows-file-description=TLS Certificate Monitor Tool",
          "--disable-ccache",
          "--mingw64",
          "--lto=no"
        )

        # Add version info if we have a valid tag
        $tagName = "${{ github.ref_name }}"
        if ($tagName -match "^v\d+\.\d+\.\d+") {
          $version = $tagName -replace "^v", ""
          $FLAGS += "--windows-file-version=$version"
          $FLAGS += "--windows-product-version=$version"
        }

        # Add icon if it exists
        if (Test-Path "assets/icon.ico") {
          $FLAGS += "--windows-icon-from-ico=assets/icon.ico"
          Write-Host "‚úÖ Using Windows icon"
        } else {
          Write-Host "‚ö†Ô∏è No Windows icon found, skipping"
        }

        python -m nuitka $FLAGS main.py

        Write-Host "üìÑ Verifying Windows binary..."
        $binaryPath = "dist\${{ env.PROJECT_NAME }}.exe"
        if (Test-Path $binaryPath) {
          $fileInfo = Get-Item $binaryPath
          Write-Host "‚úÖ Binary created: $($fileInfo.Name)"
          Write-Host "üìä Size: $([math]::Round($fileInfo.Length / 1MB, 2)) MB"

          # Add additional Windows Defender exclusion for the binary
          try {
            Add-MpPreference -ExclusionPath $fileInfo.FullName -ErrorAction SilentlyContinue
            Write-Host "‚úÖ Added Windows Defender exclusion for binary"
          } catch {
            Write-Host "‚ö†Ô∏è Could not add binary exclusion: $($_.Exception.Message)"
          }

          # Set binary attributes to help with antivirus detection
          try {
            $fileInfo.Attributes = $fileInfo.Attributes -bor [System.IO.FileAttributes]::NotContentIndexed
            Write-Host "‚úÖ Set binary attributes"
          } catch {
            Write-Host "‚ö†Ô∏è Could not set binary attributes: $($_.Exception.Message)"
          }
        } else {
          Write-Host "‚ùå Binary not found!"
          exit 1
        }

    - name: Test Windows binary help flag
      run: |
        Write-Host "üß™ Testing Windows binary help flag..."
        $binaryPath = "dist\${{ env.PROJECT_NAME }}.exe"

        Write-Host "Testing --help flag:"
        & $binaryPath --help

        Write-Host "Testing --version flag:"
        & $binaryPath --version

    - name: Save Nuitka cache
      uses: actions/cache/save@v4
      with:
        path: |
          ~/.cache/Nuitka
          ~/AppData/Local/Nuitka
          %LOCALAPPDATA%\Nuitka
        key: nuitka-${{ runner.os }}-${{ hashFiles('main.py', 'tls_cert_monitor/**/*.py', 'requirements*.txt') }}

    - name: Install cosign
      uses: sigstore/cosign-installer@v3

    - name: Sign Windows binary with cosign
      env:
        COSIGN_EXPERIMENTAL: 1
      run: |
        Write-Host "üîè Signing Windows binary with cosign..."
        cosign sign-blob --yes "dist/${{ env.PROJECT_NAME }}.exe" --output-signature "dist/${{ env.PROJECT_NAME }}.exe.sig" --output-certificate "dist/${{ env.PROJECT_NAME }}.exe.crt"
        Write-Host "‚úÖ Windows binary signed successfully"
        Get-ChildItem -Path dist

    - name: Upload Windows binary
      uses: actions/upload-artifact@v4
      with:
        name: windows-amd64-binary
        path: |
          dist/${{ env.PROJECT_NAME }}.exe
          dist/${{ env.PROJECT_NAME }}.exe.sig
          dist/${{ env.PROJECT_NAME }}.exe.crt
        retention-days: 30

  build-macos-amd64:
    name: Build macOS Binary (AMD64)
    runs-on: macos-13  # Intel-based runner for AMD64
    needs: test
    permissions:
      contents: read
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Build macOS binary
      run: |
        echo "üçé Building macOS binary with Nuitka..."
        mkdir -p dist
        
        python -m nuitka \
          --onefile \
          --standalone \
          --disable-console \
          --enable-plugin=pkg-resources \
          --assume-yes-for-downloads \
          --follow-imports \
          --include-package=tls_cert_monitor \
          --include-module=uvicorn \
          --include-module=cryptography \
          --include-module=prometheus_client \
          --output-dir=dist \
          --output-filename=${{ env.PROJECT_NAME }}-darwin-amd64 \
          --onefile-tempdir-spec=/opt/tls-cert-monitor/tmp \
          main.py
        
        echo "üìÑ Verifying macOS binary..."
        ls -la dist/
        file dist/${{ env.PROJECT_NAME }}-darwin-amd64

    - name: Install cosign
      uses: sigstore/cosign-installer@v3

    - name: Sign macOS binary with cosign
      env:
        COSIGN_EXPERIMENTAL: 1
      run: |
        echo "üîè Signing macOS binary with cosign..."
        cosign sign-blob --yes dist/${{ env.PROJECT_NAME }}-darwin-amd64 --output-signature dist/${{ env.PROJECT_NAME }}-darwin-amd64.sig --output-certificate dist/${{ env.PROJECT_NAME }}-darwin-amd64.crt
        echo "‚úÖ macOS binary signed successfully"
        ls -la dist/

    - name: Upload macOS binary
      uses: actions/upload-artifact@v4
      with:
        name: macos-amd64-binary
        path: |
          dist/${{ env.PROJECT_NAME }}-darwin-amd64
          dist/${{ env.PROJECT_NAME }}-darwin-amd64.sig
          dist/${{ env.PROJECT_NAME }}-darwin-amd64.crt
        retention-days: 30

  build-macos-arm64:
    name: Build macOS Binary (ARM64)
    runs-on: macos-14  # Apple Silicon runner for ARM64
    needs: test
    permissions:
      contents: read
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Build macOS ARM64 binary
      run: |
        echo "üçé Building macOS ARM64 binary with Nuitka..."
        mkdir -p dist
        
        python -m nuitka \
          --onefile \
          --standalone \
          --disable-console \
          --enable-plugin=pkg-resources \
          --assume-yes-for-downloads \
          --follow-imports \
          --include-package=tls_cert_monitor \
          --include-module=uvicorn \
          --include-module=cryptography \
          --include-module=prometheus_client \
          --output-dir=dist \
          --output-filename=${{ env.PROJECT_NAME }}-darwin-arm64 \
          --onefile-tempdir-spec=/opt/tls-cert-monitor/tmp \
          main.py
        
        echo "üìÑ Verifying macOS ARM64 binary..."
        ls -la dist/
        file dist/${{ env.PROJECT_NAME }}-darwin-arm64

    - name: Install cosign
      uses: sigstore/cosign-installer@v3

    - name: Sign macOS ARM64 binary with cosign
      env:
        COSIGN_EXPERIMENTAL: 1
      run: |
        echo "üîè Signing macOS ARM64 binary with cosign..."
        cosign sign-blob --yes dist/${{ env.PROJECT_NAME }}-darwin-arm64 --output-signature dist/${{ env.PROJECT_NAME }}-darwin-arm64.sig --output-certificate dist/${{ env.PROJECT_NAME }}-darwin-arm64.crt
        echo "‚úÖ macOS ARM64 binary signed successfully"
        ls -la dist/

    - name: Upload macOS ARM64 binary
      uses: actions/upload-artifact@v4
      with:
        name: macos-arm64-binary
        path: |
          dist/${{ env.PROJECT_NAME }}-darwin-arm64
          dist/${{ env.PROJECT_NAME }}-darwin-arm64.sig
          dist/${{ env.PROJECT_NAME }}-darwin-arm64.crt
        retention-days: 30

  build-container:
    name: Build and Push Container Images
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository_owner }}/${{ env.PROJECT_NAME }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}

    - name: Install cosign
      uses: sigstore/cosign-installer@v3

    - name: Build and push container image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Sign container images with cosign
      env:
        COSIGN_EXPERIMENTAL: 1
      run: |
        echo "üîè Signing container images with cosign..."

        # Get all the tags from the metadata step
        TAGS="${{ steps.meta.outputs.tags }}"

        # Sign each tag
        echo "$TAGS" | while read -r tag; do
          if [ -n "$tag" ]; then
            echo "Signing image: $tag"
            cosign sign --yes "$tag"
            echo "‚úÖ Signed: $tag"
          fi
        done

        echo "‚úÖ All container images signed successfully"

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-linux-amd64, build-windows-amd64, build-macos-amd64, build-macos-arm64, build-container]
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for changelog

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Prepare release assets
      run: |
        echo "üì¶ Preparing release assets..."
        mkdir -p release-assets
        
        # Linux binary
        if [ -f linux-amd64-binary/tls-cert-monitor ]; then
          chmod +x linux-amd64-binary/tls-cert-monitor
          tar -czf release-assets/linux-amd64.tar.gz -C linux-amd64-binary tls-cert-monitor tls-cert-monitor.sig tls-cert-monitor.crt
          echo "‚úÖ Created linux-amd64.tar.gz (with signature)"
        fi

        # Windows binary
        if [ -f windows-amd64-binary/${{ env.PROJECT_NAME }}.exe ]; then
          tar -czf release-assets/windows-amd64.tar.gz -C windows-amd64-binary ${{ env.PROJECT_NAME }}.exe ${{ env.PROJECT_NAME }}.exe.sig ${{ env.PROJECT_NAME }}.exe.crt
          echo "‚úÖ Created windows-amd64.tar.gz (with signature)"
        fi

        # macOS AMD64 binary
        if [ -f macos-amd64-binary/${{ env.PROJECT_NAME }}-darwin-amd64 ]; then
          chmod +x macos-amd64-binary/${{ env.PROJECT_NAME }}-darwin-amd64
          tar -czf release-assets/darwin-amd64.tar.gz -C macos-amd64-binary ${{ env.PROJECT_NAME }}-darwin-amd64 ${{ env.PROJECT_NAME }}-darwin-amd64.sig ${{ env.PROJECT_NAME }}-darwin-amd64.crt
          echo "‚úÖ Created darwin-amd64.tar.gz (with signature)"
        fi

        # macOS ARM64 binary
        if [ -f macos-arm64-binary/${{ env.PROJECT_NAME }}-darwin-arm64 ]; then
          chmod +x macos-arm64-binary/${{ env.PROJECT_NAME }}-darwin-arm64
          tar -czf release-assets/darwin-arm64.tar.gz -C macos-arm64-binary ${{ env.PROJECT_NAME }}-darwin-arm64 ${{ env.PROJECT_NAME }}-darwin-arm64.sig ${{ env.PROJECT_NAME }}-darwin-arm64.crt
          echo "‚úÖ Created darwin-arm64.tar.gz (with signature)"
        fi
        
        echo "üìã Release assets created:"
        ls -la release-assets/

    - name: Generate changelog and release notes
      id: changelog
      run: |
        echo "üìù Generating changelog..."
        
        # Get the tag name
        TAG_NAME=${GITHUB_REF#refs/tags/}
        echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT
        
        # Get previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        # Generate commit list with links
        echo "## What's Changed" > release_notes.md
        echo "" >> release_notes.md
        
        if [ -n "$PREV_TAG" ]; then
          echo "**Changes since ${PREV_TAG}:**" >> release_notes.md
          echo "" >> release_notes.md
          
          # Get commits since previous tag
          git log ${PREV_TAG}..HEAD --pretty=format:"- %s ([%h](https://github.com/${{ github.repository }}/commit/%H))" --reverse >> release_notes.md
        else
          echo "**Initial release:**" >> release_notes.md
          echo "" >> release_notes.md
          
          # Get all commits
          git log --pretty=format:"- %s ([%h](https://github.com/${{ github.repository }}/commit/%H))" --reverse >> release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "" >> release_notes.md
        echo "## üì¶ Pre-compiled Binaries" >> release_notes.md
        echo "" >> release_notes.md
        echo "This release includes pre-compiled binaries for multiple platforms:" >> release_notes.md
        echo "" >> release_notes.md
        echo "- **Linux (AMD64)**: \`linux-amd64.tar.gz\`" >> release_notes.md
        echo "- **Windows (AMD64)**: \`windows-amd64.tar.gz\`" >> release_notes.md
        echo "- **macOS (Intel)**: \`darwin-amd64.tar.gz\`" >> release_notes.md
        echo "- **macOS (Apple Silicon)**: \`darwin-arm64.tar.gz\`" >> release_notes.md
        echo "" >> release_notes.md
        echo "## üîí Code Signing" >> release_notes.md
        echo "" >> release_notes.md
        echo "All binaries and container images are signed with [Sigstore cosign](https://sigstore.dev/) for enhanced security:" >> release_notes.md
        echo "" >> release_notes.md
        echo "- **Binaries**: Each archive includes \`.sig\` (signature) and \`.crt\` (certificate) files" >> release_notes.md
        echo "- **Container Images**: Signed with keyless signing using GitHub OIDC" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Verifying Signatures" >> release_notes.md
        echo "" >> release_notes.md
        echo "**Binary verification:**" >> release_notes.md
        echo "\`\`\`bash" >> release_notes.md
        echo "# Verify binary signature" >> release_notes.md
        echo "cosign verify-blob --certificate tls-cert-monitor.crt --signature tls-cert-monitor.sig --certificate-identity-regexp 'https://github.com/${{ github.repository }}' --certificate-oidc-issuer 'https://token.actions.githubusercontent.com' tls-cert-monitor" >> release_notes.md
        echo "\`\`\`" >> release_notes.md
        echo "" >> release_notes.md
        echo "**Container image verification:**" >> release_notes.md
        echo "\`\`\`bash" >> release_notes.md
        echo "# Verify container image signature" >> release_notes.md
        echo "cosign verify ghcr.io/${{ github.repository_owner }}/${{ env.PROJECT_NAME }}:${TAG_NAME} --certificate-identity-regexp 'https://github.com/${{ github.repository }}' --certificate-oidc-issuer 'https://token.actions.githubusercontent.com'" >> release_notes.md
        echo "\`\`\`" >> release_notes.md
        echo "" >> release_notes.md
        echo "## ü™ü Windows Antivirus Notes" >> release_notes.md
        echo "" >> release_notes.md
        echo "If Windows Defender or antivirus software flags the executable:" >> release_notes.md
        echo "" >> release_notes.md
        echo "1. **Verify the signature** using the commands above" >> release_notes.md
        echo "2. **Add exclusion**: Add \`tls-cert-monitor.exe\` to your antivirus exclusions" >> release_notes.md
        echo "3. **Windows Defender**: Run as Administrator and execute:" >> release_notes.md
        echo "   \`\`\`powershell" >> release_notes.md
        echo "   Add-MpPreference -ExclusionPath \"C:\\path\\to\\tls-cert-monitor.exe\"" >> release_notes.md
        echo "   \`\`\`" >> release_notes.md
        echo "4. **Enterprise environments**: Contact your IT administrator to whitelist the application" >> release_notes.md
        echo "" >> release_notes.md
        echo "The binary is compiled with Nuitka and includes cryptographic libraries, which may trigger false positives." >> release_notes.md
        echo "" >> release_notes.md
        echo "## üê≥ Container Images" >> release_notes.md
        echo "" >> release_notes.md
        echo "Container images are available at:" >> release_notes.md
        echo "- \`ghcr.io/${{ github.repository_owner }}/${{ env.PROJECT_NAME }}:${TAG_NAME}\`" >> release_notes.md
        echo "- \`ghcr.io/${{ github.repository_owner }}/${{ env.PROJECT_NAME }}:latest\`" >> release_notes.md
        echo "" >> release_notes.md
        echo "## üìö Usage" >> release_notes.md
        echo "" >> release_notes.md
        echo "Extract the binary for your platform and run:" >> release_notes.md
        echo "\`\`\`bash" >> release_notes.md
        echo "./tls-cert-monitor --help" >> release_notes.md
        echo "\`\`\`" >> release_notes.md
        echo "" >> release_notes.md
        echo "For detailed usage instructions, see the [README](https://github.com/${{ github.repository }}#readme)." >> release_notes.md
        
        echo "üìÑ Generated release notes:"
        cat release_notes.md

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.changelog.outputs.tag_name }}
        name: Release ${{ steps.changelog.outputs.tag_name }}
        body_path: release_notes.md
        files: release-assets/*
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
        generate_release_notes: false  # We generate our own
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Release Summary
      run: |
        echo "üéâ Release ${{ steps.changelog.outputs.tag_name }} created successfully!"
        echo "üì¶ Assets included:"
        ls -la release-assets/
        echo ""
        echo "üîó Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ steps.changelog.outputs.tag_name }}"