---
# Windows uninstallation tasks

- name: Check if Windows service exists
  win_shell: |
    $service = Get-Service -Name "{{ service_name }}" -ErrorAction SilentlyContinue
    if ($service) {
        Write-Output "exists"
    } else {
        Write-Output "none"
    }
  register: service_exists
  changed_when: false

- name: Stop and uninstall Windows service (Nuitka-winsvc native)
  win_shell: |
    $exePath = "{{ install_dir_windows }}\\tls-cert-monitor.exe"
    $serviceName = "{{ service_name }}"

    Write-Host "Stopping Windows service..."
    Stop-Service -Name $serviceName -Force -ErrorAction SilentlyContinue
    Start-Sleep -Seconds 2

    Write-Host "Uninstalling Windows service using Nuitka-winsvc..."
    if (Test-Path $exePath) {
        & $exePath uninstall
        if ($LASTEXITCODE -eq 0) {
            Write-Host "Windows service uninstalled successfully using Nuitka-winsvc"
        } else {
            Write-Warning "Nuitka-winsvc uninstall returned code: $LASTEXITCODE"
            # Fallback to manual service removal if Nuitka-winsvc fails
            Write-Host "Falling back to manual service removal..."
            sc.exe delete $serviceName
        }
    } else {
        Write-Host "Binary not found, using manual service removal..."
        sc.exe delete $serviceName
    }
  args:
    executable: powershell
  when: service_exists.stdout | trim == "exists"
  ignore_errors: yes

- name: Ensure service is removed
  win_service:
    name: "{{ service_name }}"
    state: absent
  ignore_errors: yes

- name: Remove Windows Firewall rule
  win_firewall_rule:
    name: "TLS Certificate Monitor"
    state: absent
  ignore_errors: yes

- name: Remove Windows Defender exclusions
  win_shell: |
    # Check if Windows Defender is running
    $defenderService = Get-Service -Name "WinDefend" -ErrorAction SilentlyContinue
    if (-not $defenderService -or $defenderService.Status -ne 'Running') {
        Write-Host "Windows Defender is not running, skipping exclusion removal"
        exit 0
    }

    # Define paths to remove from exclusions
    $paths = @(
        "{{ install_dir_windows }}\\tls-cert-monitor.exe",
        "{{ install_dir_windows }}",
        "{{ config_dir_windows }}",
        "{{ log_dir_windows }}"
    )

    $removedExclusions = @()
    $existingExclusions = Get-MpPreference | Select-Object -ExpandProperty ExclusionPath

    foreach ($path in $paths) {
        if ($existingExclusions -contains $path) {
            try {
                Remove-MpPreference -ExclusionPath $path -ErrorAction Stop
                $removedExclusions += $path
                Write-Host "Removed Windows Defender exclusion: $path"
            } catch {
                Write-Warning "Failed to remove exclusion for: $path - $_"
            }
        }
    }

    if ($removedExclusions.Count -gt 0) {
        Write-Host "`nSuccessfully removed $($removedExclusions.Count) Windows Defender exclusions"
    } else {
        Write-Host "No Windows Defender exclusions found for tls-cert-monitor"
    }
  args:
    executable: powershell
  become: yes
  become_method: runas
  ignore_errors: yes

- name: Backup configuration before removal
  win_shell: |
    $configPath = "{{ config_dir_windows }}"
    $backupPath = "C:\\temp\\tls-cert-monitor-config-backup-$(Get-Date -Format 'yyyyMMdd-HHmmss').zip"

    # Create temp directory if it doesn't exist
    if (-not (Test-Path "C:\\temp")) {
        New-Item -ItemType Directory -Path "C:\\temp" | Out-Null
    }

    # Create backup
    if (Test-Path $configPath) {
        Compress-Archive -Path $configPath -DestinationPath $backupPath -Force
        Write-Host "Configuration backed up to: $backupPath"
    }

    Write-Output $backupPath
  register: config_backup
  ignore_errors: yes

- name: Remove tls-cert-monitor binary
  win_file:
    path: "{{ install_dir_windows }}\\tls-cert-monitor.exe"
    state: absent


- name: Remove installation directory
  win_file:
    path: "{{ install_dir_windows }}"
    state: absent

- name: Remove configuration directory
  win_file:
    path: "{{ config_dir_windows }}"
    state: absent
  when: (remove_config | default(false)) | bool

- name: Remove log directory
  win_file:
    path: "{{ log_dir_windows }}"
    state: absent
  when: (remove_logs | default(false)) | bool

- name: Display uninstallation summary
  debug:
    msg:
      - "TLS Certificate Monitor has been uninstalled"
      - "Service status was: {{ service_exists.stdout | trim }}"
      - "Binary and service files removed"
      - "Config backup saved to: {{ config_backup.stdout | default('Not created') }}"
      - "Config directory {{ 'removed' if (remove_config | default(false)) | bool else 'preserved' }}: {{ config_dir_windows }}"
      - "Log directory {{ 'removed' if (remove_logs | default(false)) | bool else 'preserved' }}: {{ log_dir_windows }}"