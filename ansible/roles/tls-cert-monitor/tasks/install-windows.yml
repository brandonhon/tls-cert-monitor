---
# Windows installation tasks

- name: Create required directories
  win_file:
    path: "{{ item }}"
    state: directory
  loop:
    - "{{ install_dir_windows }}"
    - "{{ config_dir_windows }}"
    - "{{ config_dir_windows }}\\certificates"
    - "{{ log_dir_windows }}"

- name: Download Windows binary
  win_get_url:
    url: "https://github.com/{{ github_repo }}/releases/download/{{ release_version }}/{{ platform_name }}-{{ arch_name }}.tar.gz"
    dest: "{{ install_dir_windows }}\\tls-cert-monitor-{{ release_version }}.tar.gz"
    validate_certs: no
  tags:
    - download

- name: Extract Windows binary
  win_shell: |
    $tarPath = "{{ install_dir_windows }}\\tls-cert-monitor-{{ release_version }}.tar.gz"
    $extractPath = "{{ install_dir_windows }}"

    # Extract tar.gz
    tar -xzf $tarPath -C $extractPath

    # Verify executable exists
    if (-not (Test-Path "$extractPath\\tls-cert-monitor.exe")) {
        throw "Failed to extract tls-cert-monitor.exe"
    }

    # Remove archive
    Remove-Item $tarPath -Force
  args:
    executable: powershell

- name: Deploy configuration file
  win_template:
    src: config-windows.yaml.j2
    dest: "{{ config_dir_windows }}\\config.yaml"
    backup: yes

# Native Windows Service Installation (v1.2.0+)
- name: Install Windows service (native method)
  win_shell: |
    $exePath = "{{ install_dir_windows }}\\tls-cert-monitor.exe"
    $configPath = "{{ config_dir_windows }}\\config.yaml"

    # Check if service exists
    $service = Get-Service -Name "{{ service_name }}" -ErrorAction SilentlyContinue

    if ($service) {
        Write-Host "Stopping existing service..."
        Stop-Service -Name "{{ service_name }}" -Force -ErrorAction SilentlyContinue
        Start-Sleep -Seconds 2

        Write-Host "Uninstalling existing service..."
        & $exePath --service-uninstall
        Start-Sleep -Seconds 2
    }

    # Install the service with auto-start
    Write-Host "Installing native Windows service..."
    & $exePath --service-install --config $configPath

    if ($LASTEXITCODE -ne 0) {
        throw "Failed to install Windows service. Exit code: $LASTEXITCODE"
    }

    # Start the service
    Write-Host "Starting Windows service..."
    & $exePath --service-start

    if ($LASTEXITCODE -ne 0) {
        throw "Failed to start Windows service. Exit code: $LASTEXITCODE"
    }

    # Verify service is running
    Start-Sleep -Seconds 3
    $service = Get-Service -Name "{{ service_name }}" -ErrorAction SilentlyContinue
    if ($service.Status -ne 'Running') {
        throw "Service is not running. Status: $($service.Status)"
    }

    Write-Host "Windows service installed and started successfully"
  args:
    executable: powershell
  notify: restart tls-cert-monitor-windows-native


- name: Configure Windows Firewall rule
  win_firewall_rule:
    name: "TLS Certificate Monitor"
    localport: "{{ service_port }}"
    action: allow
    direction: in
    protocol: tcp
    state: present
    enabled: yes

- name: Verify service is running
  win_shell: |
    $service = Get-Service -Name "{{ service_name }}" -ErrorAction SilentlyContinue
    if (-not $service) {
        throw "Service '{{ service_name }}' not found"
    }

    if ($service.Status -ne 'Running') {
        throw "Service is not running. Status: $($service.Status)"
    }

    Write-Host "Service '{{ service_name }}' is running successfully"
    return $true
  args:
    executable: powershell
  register: service_status
  failed_when: service_status.rc != 0