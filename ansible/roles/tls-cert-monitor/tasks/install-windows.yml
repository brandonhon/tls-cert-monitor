---
# Windows installation tasks

- name: Create required directories
  win_file:
    path: "{{ item }}"
    state: directory
  loop:
    - "{{ install_dir_windows }}"
    - "{{ config_dir_windows }}"
    - "{{ config_dir_windows }}\\certificates"
    - "{{ log_dir_windows }}"

- name: Download Windows binary
  win_get_url:
    url: "https://github.com/{{ github_repo }}/releases/download/{{ release_version }}/{{ platform_name }}-{{ arch_name }}.tar.gz"
    dest: "{{ install_dir_windows }}\\tls-cert-monitor-{{ release_version }}.tar.gz"
    validate_certs: no
  tags:
    - download

- name: Extract Windows binary (onefile)
  win_shell: |
    $tarPath = "{{ install_dir_windows }}\\tls-cert-monitor-{{ release_version }}.tar.gz"
    $extractPath = "{{ install_dir_windows }}"
    $finalExePath = "$extractPath\\tls-cert-monitor.exe"

    # Extract tar.gz - onefile binary is directly in the archive
    tar -xzf $tarPath -C $extractPath

    # Verify executable exists (onefile mode creates single .exe)
    if (-not (Test-Path $finalExePath)) {
        # List contents to debug
        Write-Host "Contents of extraction directory:"
        Get-ChildItem $extractPath -Recurse | Select-Object FullName, Length
        throw "Failed to extract tls-cert-monitor.exe from onefile archive"
    }

    Write-Host "Successfully extracted onefile binary: $finalExePath"
    $fileInfo = Get-Item $finalExePath
    Write-Host "Binary size: $([math]::Round($fileInfo.Length / 1MB, 2)) MB"

    # Remove archive
    Remove-Item $tarPath -Force
  args:
    executable: powershell

- name: Deploy configuration file
  win_template:
    src: config-windows.yaml.j2
    dest: "{{ config_dir_windows }}\\config.yaml"
    backup: yes

# PowerShell Windows Service Installation
- name: Install Windows service (PowerShell method)
  win_shell: |
    $exePath = "{{ install_dir_windows }}\\tls-cert-monitor.exe"
    $configPath = "{{ config_dir_windows }}\\config.yaml"
    $serviceName = "{{ service_name }}"
    $serviceDisplayName = "{{ service_name }}"
    $serviceDescription = "Monitor TLS/SSL certificates for expiration and security issues"

    # Check if service exists and stop/remove it
    $existingService = Get-Service -Name $serviceName -ErrorAction SilentlyContinue
    if ($existingService) {
        Write-Host "Stopping existing service..."
        Stop-Service -Name $serviceName -Force -ErrorAction SilentlyContinue
        Start-Sleep -Seconds 2

        Write-Host "Removing existing service..."
        sc.exe delete $serviceName
        Start-Sleep -Seconds 2
    }

    # Create the service using sc.exe with proper binary path
    Write-Host "Creating Windows service..."
    $binaryPathName = "`"$exePath`" --config `"$configPath`""

    $result = sc.exe create $serviceName binPath= $binaryPathName DisplayName= $serviceDisplayName start= auto
    if ($LASTEXITCODE -ne 0) {
        throw "Failed to create Windows service. Exit code: $LASTEXITCODE. Output: $result"
    }

    # Set service description
    sc.exe description $serviceName $serviceDescription

    # Start the service
    Write-Host "Starting Windows service..."
    $result = sc.exe start $serviceName
    if ($LASTEXITCODE -ne 0) {
        throw "Failed to start Windows service. Exit code: $LASTEXITCODE. Output: $result"
    }

    # Verify service is running
    Start-Sleep -Seconds 5
    $service = Get-Service -Name $serviceName -ErrorAction SilentlyContinue
    if (-not $service) {
        throw "Service was not created successfully"
    }
    if ($service.Status -ne 'Running') {
        throw "Service is not running. Status: $($service.Status)"
    }

    Write-Host "Windows service created and started successfully using PowerShell"
  args:
    executable: powershell
  notify: restart tls-cert-monitor-windows-native

# Windows Defender Exclusion
- name: Check if Windows Defender exclusion should be added
  pause:
    prompt: >-
      Would you like to add a Windows Defender exclusion for tls-cert-monitor.exe?
      This can help prevent false positives and improve performance. (yes/no)
  register: defender_exclusion_prompt

- name: Add Windows Defender exclusion
  when: defender_exclusion_prompt.user_input | lower == 'yes'
  win_shell: |
    $exePath = "{{ install_dir_windows }}\\tls-cert-monitor.exe"

    # Check if Windows Defender is running
    $defenderService = Get-Service -Name "WinDefend" -ErrorAction SilentlyContinue
    if (-not $defenderService -or $defenderService.Status -ne 'Running') {
        Write-Host "Windows Defender is not running, skipping exclusion configuration"
        exit 0
    }

    # Check if exclusion already exists
    $existingExclusions = Get-MpPreference | Select-Object -ExpandProperty ExclusionPath
    if ($existingExclusions -contains $exePath) {
        Write-Host "Exclusion for $exePath already exists"
        exit 0
    }

    # Add the exclusion
    try {
        Add-MpPreference -ExclusionPath $exePath -ErrorAction Stop
        Write-Host "Successfully added Windows Defender exclusion for: $exePath"

        # Also add exclusion for the entire install directory
        $installDir = "{{ install_dir_windows }}"
        if ($existingExclusions -notcontains $installDir) {
            Add-MpPreference -ExclusionPath $installDir -ErrorAction SilentlyContinue
            Write-Host "Also added exclusion for installation directory: $installDir"
        }

        # Add exclusion for the config directory
        $configDir = "{{ config_dir_windows }}"
        if ($existingExclusions -notcontains $configDir) {
            Add-MpPreference -ExclusionPath $configDir -ErrorAction SilentlyContinue
            Write-Host "Also added exclusion for config directory: $configDir"
        }

        # Add exclusion for the log directory
        $logDir = "{{ log_dir_windows }}"
        if ($existingExclusions -notcontains $logDir) {
            Add-MpPreference -ExclusionPath $logDir -ErrorAction SilentlyContinue
            Write-Host "Also added exclusion for log directory: $logDir"
        }

        # Display current exclusions
        Write-Host "`nCurrent Windows Defender exclusions for tls-cert-monitor:"
        Get-MpPreference | Select-Object -ExpandProperty ExclusionPath |
            Where-Object { $_ -like "*tls-cert-monitor*" } |
            ForEach-Object { Write-Host "  - $_" }

    } catch {
        Write-Warning "Failed to add Windows Defender exclusion: $_"
        Write-Host "You may need to run this playbook with elevated privileges"
        exit 1
    }
  args:
    executable: powershell
  become: yes
  become_method: runas

- name: Configure Windows Firewall rule
  win_firewall_rule:
    name: "TLS Certificate Monitor"
    localport: "{{ service_port }}"
    action: allow
    direction: in
    protocol: tcp
    state: present
    enabled: yes

- name: Verify service is running
  win_shell: |
    $service = Get-Service -Name "{{ service_name }}" -ErrorAction SilentlyContinue
    if (-not $service) {
        throw "Service '{{ service_name }}' not found"
    }

    if ($service.Status -ne 'Running') {
        throw "Service is not running. Status: $($service.Status)"
    }

    Write-Host "Service '{{ service_name }}' is running successfully"
    return $true
  args:
    executable: powershell
  register: service_status
  failed_when: service_status.rc != 0