---
# Linux installation tasks

# Handle /var/tmp noexec mount option
- name: Check if /var/tmp has noexec mount option
  pause:
    prompt: "Does /var/tmp have 'noexec' mount option in /etc/fstab? (yes/no)"
  register: noexec_prompt

- name: Handle /var/tmp noexec mount option
  when: noexec_prompt.user_input | lower == 'yes'
  block:
    - name: Check current /etc/fstab for /var/tmp entry
      shell: grep -E '^\s*[^#].*\s+/var/tmp\s+' /etc/fstab || true
      register: fstab_vartmp
      changed_when: false

    - name: Display current /var/tmp fstab entry
      debug:
        msg: "Current /var/tmp entry: {{ fstab_vartmp.stdout }}"
      when: fstab_vartmp.stdout != ""

    - name: Backup /etc/fstab
      copy:
        src: /etc/fstab
        dest: /etc/fstab.backup.{{ ansible_date_time.epoch }}
        remote_src: yes
        mode: '0644'
      when: fstab_vartmp.stdout != ""

    - name: Remove noexec from /var/tmp in /etc/fstab
      replace:
        path: /etc/fstab
        regexp: '^(\s*[^#].*\s+/var/tmp\s+.*?)(\s*,?\s*noexec)(\s*,.*)?$'
        replace: '\1\3'
      when: fstab_vartmp.stdout != ""

    - name: Clean up multiple commas in /etc/fstab
      replace:
        path: /etc/fstab
        regexp: >-
          (defaults|rw|ro|auto|noauto|user|nouser|exec|sync|async|dev|nodev|
          suid|nosuid|relatime|noatime|diratime|nodiratime),+
        replace: '\1,'
      when: fstab_vartmp.stdout != ""

    - name: Clean up trailing commas in /etc/fstab mount options
      replace:
        path: /etc/fstab
        regexp: >-
          (\s+)(defaults|rw|ro|auto|noauto|user|nouser|exec|sync|async|dev|
          nodev|suid|nosuid|relatime|noatime|diratime|nodiratime),(\s+[0-9])
        replace: '\1\2\3'
      when: fstab_vartmp.stdout != ""

    - name: Remount /var/tmp without noexec
      mount:
        path: /var/tmp
        state: remounted
      when: fstab_vartmp.stdout != ""

    - name: Verify /var/tmp mount options
      shell: mount | grep '/var/tmp'
      register: mount_vartmp
      changed_when: false
      failed_when: false

    - name: Display new /var/tmp mount options
      debug:
        msg: "Current /var/tmp mount: {{ mount_vartmp.stdout }}"
      when: mount_vartmp.stdout != ""

- name: Install required packages
  package:
    name:
      - tar
      - gzip
      - ca-certificates
    state: present

- name: Create service user
  user:
    name: "{{ service_user_linux }}"
    system: yes
    shell: /bin/false
    home: "{{ install_dir_linux }}"
    create_home: no
    comment: "TLS Certificate Monitor Service User"

- name: Create required directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ service_user_linux }}"
    group: "{{ service_user_linux }}"
    mode: '0755'
  loop:
    - "{{ install_dir_linux }}"
    - "{{ config_dir_linux }}"
    - "{{ config_dir_linux }}/certificates"
    - "{{ log_dir_linux }}"

- name: Download Linux binary
  get_url:
    url: "https://github.com/{{ github_repo }}/releases/download/{{ release_version }}/{{ platform_name }}-{{ arch_name }}.tar.gz"
    dest: "/tmp/tls-cert-monitor-{{ release_version }}.tar.gz"
    mode: '0644'
    validate_certs: no
  tags:
    - download

- name: Extract binary
  unarchive:
    src: "/tmp/tls-cert-monitor-{{ release_version }}.tar.gz"
    dest: "{{ install_dir_linux }}"
    remote_src: yes
    owner: "{{ service_user_linux }}"
    group: "{{ service_user_linux }}"
    mode: '0755'
    creates: "{{ install_dir_linux }}/tls-cert-monitor"

- name: Clean up download
  file:
    path: "/tmp/tls-cert-monitor-{{ release_version }}.tar.gz"
    state: absent

- name: Deploy configuration file
  template:
    src: config-linux.yaml.j2
    dest: "{{ config_dir_linux }}/config.yaml"
    owner: "{{ service_user_linux }}"
    group: "{{ service_user_linux }}"
    mode: '0640'
    backup: yes

- name: Deploy systemd service
  template:
    src: tls-cert-monitor.service.j2
    dest: /etc/systemd/system/{{ service_name }}.service
    mode: '0644'
  notify:
    - reload systemd
    - restart tls-cert-monitor

- name: Configure log rotation
  copy:
    content: |
      {{ log_dir_linux }}/*.log {
          daily
          rotate 14
          compress
          delaycompress
          missingok
          notifempty
          create 0640 {{ service_user_linux }} {{ service_user_linux }}
          sharedscripts
          postrotate
              systemctl reload {{ service_name }} 2>/dev/null || true
          endscript
      }
    dest: /etc/logrotate.d/{{ service_name }}
    mode: '0644'

- name: Start and enable service
  systemd:
    name: "{{ service_name }}"
    state: started
    enabled: yes
    daemon_reload: yes
